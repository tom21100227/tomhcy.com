# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll site to Pages 2

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
    paths-ignore:
      - 'README.md'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 0 # Increment this number if you need to re-download cached gems
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install optimization tools
        run: |
          npm install -g csso-cli terser
      - name: Pre-build Asset Optimization
        run: |
          echo "ðŸš€ Starting pre-build asset optimization..."
          
          # Minify CSS files before Jekyll processes them
          find css -name "*.css" -not -path "*node_modules*" | while read file; do
            if [ -f "$file" ]; then
              echo "Minifying CSS: $file"
              csso "$file" --output "$file"
            fi
          done
          
          # Minify JS files before Jekyll processes them (with very safe options and verbose logging)
          find js -name "*.js" -not -path "*node_modules*" | while read file; do
            if [ -f "$file" ]; then
              echo "Minifying JS: $file"
              echo "Original file content preview:"
              head -3 "$file"
              # Use very conservative minification to avoid breaking URLs
              terser "$file" --compress sequences=false,conditionals=false,comparisons=false,evaluate=false,booleans=false,loops=false,unused=false,hoist_funs=false,keep_fargs=true,hoist_vars=false,if_return=false,join_vars=false,cascade=false,collapse_vars=false,reduce_vars=false,warnings=false,negate_iife=false,pure_getters=false,pure_funcs=null,drop_console=false,drop_debugger=false,keep_fnames=true --mangle false --keep-fnames --verbose --output "$file"
              echo "Minified file content preview:"
              head -3 "$file"
              echo "---"
            fi
          done
          
          echo "âœ… Pre-build asset optimization completed!"
      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
